
const MENU_LABEL = ["Report or learn more", "Signaler ou en savoir plus", "Reportar u obtener más información", "Melde dies oder erfahre mehr darüber", "Υποβάλετε αναφορά ή μάθετε περισσότερα", "Denuncie ou saiba mais", "Prijavi ili saznaj više", "Segnala od ottieni maggiori informazioni", "Raportează sau află mai multe"];
var SIDEADINFO = 'side_ad_info'
var sideAds= {};
const DOM_AD = 'domAD';
var ASYNCPARAMS = {};
var SECOND_ASYNCPARAMS = {};
var ASYNCPARAMSGET = {};

function unicodeToChar(text) {
    return text.replace(/\\u[\dA-F]{4}/gi,
        function (match) {
            return String.fromCharCode(parseInt(match.replace(/\\u/g, ''), 16));
        });
}

/**
 * extract ad id and the rest of the parameters required to build the explanation url
 * for the ad from the "ajaxify" attribute value (for sideads)
 *
 * @param  {string} resp string to search for the ajaxify parameter
 * @return {object}      parameters to build the explanation url and the ad id
 */
function grabParamsFromSideAdAjaxify(resp) {
    let text = resp.replaceAll('\\\\\\','\\').replaceAll('\\\\','\\').replaceAll('amp;','');
    let requestParams = text.match( /"\\\/waist_content\\\/dialog\S+?"/ )[0].replace('"\\\/waist_content\\\/dialog\\\/?','');
    // requestParams.slice(0,requestParams.length-2)
    requestParams = decodeURIComponent(unicodeToChar(requestParams.slice(0,requestParams.length-2)));
    let serialized = requestParams.match('serialized_nfx_action_info={(.*)}')[1];
    requestParams = requestParams.replaceAll(serialized,encodeURIComponent(serialized));
    let clientToken = requestParams.match(/client_token=(.*?)&/)[1];
    let adId = requestParams.match(/id=[0-9]+/)[0].match(/[0-9]+/)[0];
    return {requestParams:requestParams,adId:adId,clientToken:clientToken};

}

/**
 * @param  {object} adData The object that should be sent to the background script
 * @param  {object} paramsFinal parameters from the more button to call the explanation URL
 * @param  {string} adId the id of the associated ad
 * @param  {asyncParameters} the async paramaters generated by Facebook for GET and POST requests
 * @return {boolean} if call was successful returns true, else false
 */
function getSideAdExplanationUrlAndNotifyBackgroundScript(adData,paramsFinal,adId,asyncParametersDialog){
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.open("POST",'https://www.facebook.com/ajax/a.php?', true);



    xmlhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

    xmlhttp.onload = function(e) {
        // Do whatever with response
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200){
            let results = captureErrorContentScript(grabParamsFromSideAdAjaxify,[xmlhttp.response],NaN);
            if (!results) {
                return false;
            }

            adData.explanationUrl = EXPLANATIONSURL + results.requestParams + '&' + $.param(asyncParametersDialog);
            adData.clientToken = results.clientToken;
            chrome.runtime.sendMessage(adData);
            return true;
        }
        //TODO: SEND SOME ERROR ABOUT SIDEADS

    }

    // TODO: PUT THE PARAMETERS IN SPECIFIC ORDER
    xmlhttp.send($.param(paramsFinal));


}

/**
 * Collect the explanation url from the ads and then send the adData to the background script
 *
 * @param  {object} adData. Data to be sent to the AdAnalyst server
 * @param  {object} sideAds All side ad objects thtat were detected
 * @param  {string} adId The ad id of the ad detected
 * @return {}
 */
function sendSideAdWithExplanationnUrl(adData,sideAds,adId) {

    adData[MSG_TYPE] = SIDEADINFO;
    let sideAd = sideAds[adId];
    let menus =  get_dropdown_ad_menus(sideAd[DOM_AD]);
    let link = menus[0].getAttribute('ajaxify')
    let urlAj = '/ajax/a.php?'
    let pars = createObjFromURI(link.replace(urlAj,''));
    let paramsFinal = Object.assign(pars,ASYNCPARAMS)
    paramsFinal['nctr[_mod]']='pagelet_ego_pane';
    let asyncParametersDialog = ASYNCPARAMSGET;

    adData.graphQLAsyncParams = SECOND_ASYNCPARAMS;
    captureErrorContentScript(updateAsyncParams,[],undefined);
    captureErrorContentScript(getSideAdExplanationUrlAndNotifyBackgroundScript,[adData,paramsFinal,adId,asyncParametersDialog],undefined);

}

/**
 * return all menu button elements in a DOM element (they contains the "Why Am I Seeing this?"  BUtton).
 * (for a single side ad, it should be only one). Detected by the "Report or learn more" title
 *
 *
 * @param  {object} doc DOM element to be examined
 * @return {Array}      array containing all menu DOM elements that were detected
 */
function get_dropdown_ad_menus(doc){
    let links = doc.getElementsByTagName('a');
    let menus = [];
    for (let i=0;i<links.length;i++){
        let link = links[i];
        let menuLabel = link.getAttribute("aria-label");
        if ((menuLabel) && (MENU_LABEL.indexOf(menuLabel)>=0)) {
            menus.push(link)
        }
    }
    return menus

}

/**
 * return the side ads in the page.
 *
 * @return {object} object containing all the sideads in the page (their ad id is the key of each side ad)
 */
function getSideAds() {
    let ads = {};
    let menus = get_dropdown_ad_menus(document);
    for (let i=0;i<menus.length;i++) {
        let menu = menus[i]

        let adId = JSON.parse(menu.getAttribute('data-gt').replace(/([\[:])?(\d+)([,\}\]])/g, "$1\"$2\"$3"))['data_to_log']['ad_id'].toString()
        let advertiserId = JSON.parse(menu.getAttribute('data-gt').replace(/([\[:])?(\d+)([,\}\]])/g, "$1\"$2\"$3"))['data_to_log'] ['ad_account_id'].toString();
        let isCollected = false;



        ads[adId] ={};
        ads[adId][DOM_AD] =menu.parentElement.parentElement.parentElement;
        ads[adId]['ad_account_id'] = advertiserId;
    }

    return ads
}

/**
 * processes side ad object adding in the object
 * all the data/meta data that we save in the server (except of explanation of the ad)
 *
 * @param  {object} frontAd DOM element of the side ad
 * @return {object}         object to be send to the server
 */
function processSideAd(sideAdObj,adId) {

    let sideAd = sideAdObj[DOM_AD];
    sideAd.className += " " + COLLECTED;

    let raw_ad = sideAd.innerHTML;
    let timestamp = (new Date()).getTime();
    let pos = getPos(sideAd);
    let offsetX = pos.x;
    let offsetY = pos.y;
    let type = TYPES.sideAd;
    let [landing_pages,images] = getLandingPagesSideAds(sideAd.getElementsByTagName('a'),sideAd);

    //TODO:GET IMAGE URL
    let fb_id = adId;
    let fb_advertiser_id = sideAdObj['ad_account_id'];
    let user_id = getUserId();
    return {'raw_ad':raw_ad,'timestamp':timestamp,'offsetX':offsetX,'offsetY':offsetY,'type':type,'user_id':user_id,'fb_id':fb_id,'fb_advertiser_id':fb_advertiser_id,landing_pages:landing_pages,images:images}


}

/**
 * return landing pages and images from the side ads.
 * Currently landing pages are not updated, so we collect only a subset.
 *
 * @param  {array} links    array of link DOM elements that are included in the front ad
 * @param  {object} sideAd DOM element of the front ad
 * @return {array}          array (essentially tuple) that contains the landing page urls and the image urls
 */
function getLandingPagesSideAds(links,sideAd) {
    let landingPages = [];
    let images = []
    for (let i=0;i<links.length;i++) {
        let link = links[i];
        let onmousedown= link.getAttribute('onmousedown');
        if (!onmousedown) {
            continue
        }

        let imgs = link.getElementsByTagName('img');
        if (imgs.length>0) {
            for (let j=0;j<imgs.length;j++) {
                if (imgs[j].src) {
                    images.push(imgs[j].src)
                    continue
                }
            }
        }



        let urls = [link.href]
        if (!urls) {
            continue
        }


        landingPages.extend(urls);

    }

    let additionalImages = sideAd.getElementsByClassName('scaledImageFitWidth');
    for (let i=0;i<additionalImages.length;i++) {
        images.push(additionalImages[i].src);

    }

    additionalImages = sideAd.getElementsByClassName('scaledImageFitHeight');
    for (let i=0;i<additionalImages.length;i++) {
        images.push(additionalImages[i].src);

    }


    additionalImages = sideAd.getElementsByClassName('_kvn img');
    for (let i=0;i<additionalImages.length;i++) {
        images.push(additionalImages[i].src);

    }


    return [landingPages.unique(),images.unique()];

}

/** Grab side Ads
 *
 *
 * @return {}
 */
function grabSideAds() {

    if ((Object.keys(ASYNCPARAMS).length<=0) || (Object.keys(SECOND_ASYNCPARAMS).length<=0) || (Object.keys(ASYNCPARAMSGET).length<=0)) {
        captureErrorContentScript(updateAsyncParams,[],undefined);
        return;
    }
    sideAds = captureErrorContentScript(getSideAds,[],{});

    let noNewAds = Object.keys(sideAds).length;

    if (noNewAds>0) {

        let adsToProcessKeys =Object.keys(sideAds);
        for (let i=0; i<adsToProcessKeys.length;i++) {
            let adId = adsToProcessKeys[i];
            let adData = captureErrorContentScript(processSideAd,[sideAds[adId],adId],{});
            if (isEqual(adData,{})==true) {
                continue
            }
            captureErrorContentScript(sendSideAdWithExplanationnUrl,[adData,sideAds,adId],{});
        }
    }
}

/**
 * create a json object that is derived from URL Get parameters and their values
 * @param  {string} params URL get parameters
 * @return {object}        desired object
 */
var createObjFromURI = function(params) {
    let uri = decodeURI(params);
    let chunks = uri.split('&');
    params = Object();

    for (let i=0; i < chunks.length ; i++) {
        let chunk = chunks[i].split('=');
        if(chunk[0].search("\\[\\]") !== -1) {
            if( typeof params[chunk[0]] === 'undefined' ) {
                params[chunk[0]] = decodeURIComponent([chunk[1]]);

            } else {
                params[chunk[0]].push(decodeURIComponent(chunk[1]));
            }


        } else {
            params[chunk[0]] = decodeURIComponent(chunk[1]);
        }
    }

    return params;
}

function updateAsyncParams() {
    data = {asyncParams:true}
    window.postMessage(data,"*")
}

function setAsynchParams(event) {
    ASYNCPARAMS = event.data.paramsPost;
    ASYNCPARAMSGET = event.data.paramsGet;
    SECOND_ASYNCPARAMS = event.data.paramsPostSecond;

}